    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Dashboards;

import business.Employer.JobRole;
import business.Organization.EmployerOrganization;
import business.WorkQueue.WorkRequest;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;
import models.DashboardModel_card;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author sahil
 */
public class EmployerAdminDashboard extends javax.swing.JPanel {

    /**
     * Creates new form TeacherOverviewPanel1
     */
//    private Map<String, Integer> countryCount = new HashMap<>();
//    private Map<String, Integer> countryCount1 = new HashMap<>();
//    
    EmployerOrganization employerOrganization;
    JobRole jobRole;
    public EmployerAdminDashboard(EmployerOrganization employerOrganization) {
        initComponents();
        this.employerOrganization = employerOrganization;
        
        displaymetrics();
        bar_chart();
        line_chart();
        populatetable();
//        table_content();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        panelBarChart = new models.PanelBorder();
        panelLineChart = new models.PanelBorder();
        jPanel2 = new javax.swing.JPanel();
        dashboardCard1 = new models.DashboardCard();
        dashboardCard2 = new models.DashboardCard();
        dashboardCard3 = new models.DashboardCard();
        panelBorder1 = new models.PanelBorder();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        setOpaque(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setMinimumSize(new java.awt.Dimension(1400, 1080));

        panelBarChart.setBackground(new java.awt.Color(204, 204, 204));
        panelBarChart.setLayout(new java.awt.BorderLayout());

        panelLineChart.setBackground(new java.awt.Color(204, 204, 204));
        panelLineChart.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 10, 1));

        dashboardCard1.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard1.setColor2(new java.awt.Color(255, 102, 102));
        jPanel2.add(dashboardCard1);

        dashboardCard2.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard2.setColor2(new java.awt.Color(255, 102, 102));
        jPanel2.add(dashboardCard2);

        dashboardCard3.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard3.setColor2(new java.awt.Color(255, 102, 102));
        jPanel2.add(dashboardCard3);

        panelBorder1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Recent Job Posts");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Job Role", "Total Applicants"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setOpaque(false);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout panelBorder1Layout = new javax.swing.GroupLayout(panelBorder1);
        panelBorder1.setLayout(panelBorder1Layout);
        panelBorder1Layout.setHorizontalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelBorder1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 496, Short.MAX_VALUE))
                .addContainerGap())
        );
        panelBorder1Layout.setVerticalGroup(
            panelBorder1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelBorder1Layout.createSequentialGroup()
                .addGap(16, 16, 16)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2)
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(panelLineChart, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(panelBarChart, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(410, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(panelLineChart, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(panelBarChart, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(panelBorder1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(175, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(102, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private models.DashboardCard dashboardCard1;
    private models.DashboardCard dashboardCard2;
    private models.DashboardCard dashboardCard3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private models.PanelBorder panelBarChart;
    private models.PanelBorder panelBorder1;
    private models.PanelBorder panelLineChart;
    // End of variables declaration//GEN-END:variables
    
    private void populatetable() {
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        model.setRowCount(0);
        
        HashMap<String, Integer> jobRoleMap = new HashMap();
        String jobRoleString;
        
        for (WorkRequest w : employerOrganization.getWorkQueue().getWorkRequestList()){
            JobRole j = (JobRole)w.getSubject();
            jobRoleString = j.getName();
            if (jobRoleMap.containsKey(jobRoleString)) {
                jobRoleMap.put(jobRoleString, jobRoleMap.get(jobRoleString)+1);
            }
            else {
                jobRoleMap.put(jobRoleString, 1);
            }
        }
        
        for (Map.Entry<String, Integer> entry : jobRoleMap.entrySet()) {
            Object[] row = new Object[2];
            row[0] = entry.getKey();
            row[1] = entry.getValue();
            model.addRow(row);
        }   
    }
    
    private void bar_chart() {
        double salesaveragepay = 0;
        double techaveragepay = 0;
        double marketingaveragepay = 0;
        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
        
        int count = 0;
        double pay = 0;
        for(JobRole j : employerOrganization.getEmployer().getJobRoleList()){
            if(j.getDomain().equals("Sales")){
                count+=1;
                pay+=j.getPay();
            }
        }
        salesaveragepay = pay / count;
        
        int count2 = 0;
        double pay2 = 0;
        for(JobRole j : employerOrganization.getEmployer().getJobRoleList()){
            if(j.getDomain().equals("Technology")){
                count2+=1;
                pay2+=j.getPay();
            }
        }
        techaveragepay = pay2 / count2;
        
        int count3 = 0;
        double pay3 = 0;
        for(JobRole j : employerOrganization.getEmployer().getJobRoleList()){
            if(j.getDomain().equals("Marketing")){
                count3+=1;
                pay3+=j.getPay();
            }
        }
        marketingaveragepay = pay3 / count3;
        
        
        dataset.setValue(salesaveragepay, "Average Sales Salary", "Sales");
        dataset.setValue(techaveragepay, "Average Technology Salary", "Technology");
        dataset.setValue(marketingaveragepay, "Average Marketing Salary", "Marketing");
        
        JFreeChart barchart = ChartFactory.createBarChart("Salary Statistics", "Role", "Average Salary", dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p = barchart.getCategoryPlot();
        barchart.setBackgroundPaint(Color.white);
        p.setBackgroundPaint(null);
        
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        Color color = new Color(41,134,204);
        renderer.setSeriesPaint(1, color);
        
        ChartPanel barChartPanel = new ChartPanel(barchart);
        panelBarChart.removeAll();
        panelBarChart.add(barChartPanel);
        panelBarChart.validate();
    }

    private void line_chart() {
        
        Calendar calendar = Calendar.getInstance();
        // Set the Calendar object to the date
        
        HashMap<String, Integer> monthCountMap = new HashMap();
        String monthName;
        
        for(WorkRequest w: employerOrganization.getWorkQueue().getWorkRequestList()){
            if(w.getStatus().equals("Offer Accepted")){
                calendar.setTime(w.getResolveDate());
                monthName = calendar.getDisplayName(Calendar.MONTH, Calendar.LONG, Locale.getDefault());
                if(monthCountMap.containsKey(monthName)){
                    monthCountMap.put(monthName, monthCountMap.get(monthName)+1);
                }
                else{
                    monthCountMap.put(monthName, 1);
                }
            }
        }
//        System.out.println("out here");
//        for(Map.Entry<String, Integer> entry : monthCountMap.entrySet()){
//            System.out.println("In here");
//            System.out.println(entry.getKey() + ": " + entry.getValue());
//        }
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//        
        for (Map.Entry<String, Integer> entry : monthCountMap.entrySet()) {
            String month = entry.getKey();
            int hiringCount = entry.getValue();

            // Add the data to the dataset
            dataset.addValue(hiringCount, "Hiring Count", month);
        }
        
        
        JFreeChart barchart = ChartFactory.createBarChart("Hiring Statistics", "Total Hired","Month", dataset, PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p = barchart.getCategoryPlot();
        barchart.setBackgroundPaint(Color.white);
        p.setBackgroundPaint(null);
        
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        Color color = new Color(41,134,204);
        renderer.setSeriesPaint(1, color);
        
        ChartPanel barChartPanel = new ChartPanel(barchart);
        panelLineChart.removeAll();
        panelLineChart.add(barChartPanel);
        panelLineChart.validate();
        
    }

    private void displaymetrics() {
        int totaljobposts = 0;
        int totalapplicants = 0;
        int totalhired = 0;
//        
        totaljobposts = employerOrganization.getEmployer().getJobRoleList().size();
        totalapplicants = employerOrganization.getWorkQueue().getWorkRequestList().size();
        
        for(WorkRequest w:employerOrganization.getWorkQueue().getWorkRequestList()){
            if(w.getStatus().equals("Offer Accepted")){
                totalhired+=1;
            }
        }
        
        dashboardCard1.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/totaljobposts.png")), "Total Job Posts", totaljobposts));
        dashboardCard2.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/totaljobapplicants.png")), "Total Applicants", totalapplicants));
        dashboardCard3.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/hired.png")), "Hired Successfully", totalhired));
//        
    }

}
    
