    /*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.Dashboards;

import business.Employer.JobRole;
import business.UserAccount.UserAccount;
import business.WorkQueue.WorkRequest;
import java.awt.Color;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;
import java.util.Set;
import javax.swing.ImageIcon;
import models.DashboardModel_card;

import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LineAndShapeRenderer;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author sahil
 */
public class StudentDashboard extends javax.swing.JPanel {

    /**
     * Creates new form TeacherOverviewPanel1
     */
//    private Map<String, Integer> countryCount = new HashMap<>();
//    private Map<String, Integer> countryCount1 = new HashMap<>();
//    
    UserAccount userAccount;
    public StudentDashboard(UserAccount userAccount) {
        initComponents();
//        this.countryCount = new HashMap<>();
//        this.countryCount1 = new HashMap<>();
        this.userAccount = userAccount;
        
        displaymetrics();
        bar_chart();
        displayCharts();
//        table_content();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        panelBarChart = new models.PanelBorder();
        jPanel2 = new javax.swing.JPanel();
        dashboardCard1 = new models.DashboardCard();
        dashboardCard2 = new models.DashboardCard();
        dashboardCard3 = new models.DashboardCard();
        dashboardCard4 = new models.DashboardCard();

        setOpaque(false);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setPreferredSize(new java.awt.Dimension(1500, 1080));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setMinimumSize(new java.awt.Dimension(1400, 1080));
        jPanel3.setPreferredSize(new java.awt.Dimension(1500, 1080));

        panelBarChart.setBackground(new java.awt.Color(204, 204, 204));
        panelBarChart.setLayout(new java.awt.BorderLayout());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setLayout(new java.awt.GridLayout(1, 0, 10, 1));

        dashboardCard1.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard1.setColor2(new java.awt.Color(153, 204, 255));
        jPanel2.add(dashboardCard1);

        dashboardCard2.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard2.setColor2(new java.awt.Color(153, 204, 255));
        jPanel2.add(dashboardCard2);

        dashboardCard3.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard3.setColor2(new java.awt.Color(153, 204, 255));
        jPanel2.add(dashboardCard3);

        dashboardCard4.setColor1(new java.awt.Color(153, 102, 255));
        dashboardCard4.setColor2(new java.awt.Color(153, 204, 255));
        jPanel2.add(dashboardCard4);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelBarChart, javax.swing.GroupLayout.PREFERRED_SIZE, 978, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(192, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(panelBarChart, javax.swing.GroupLayout.PREFERRED_SIZE, 481, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(326, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1080, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private models.DashboardCard dashboardCard1;
    private models.DashboardCard dashboardCard2;
    private models.DashboardCard dashboardCard3;
    private models.DashboardCard dashboardCard4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private models.PanelBorder panelBarChart;
    // End of variables declaration//GEN-END:variables
    
    private void bar_chart() {
        List<String> company = new ArrayList<>();
        List<Double> salary = new ArrayList<>();
        
        for (WorkRequest w : userAccount.getWorkQueue().getWorkRequestList()){   
           JobRole j = (JobRole)w.getSubject();
           company.add(j.getEmployer().getName());
           salary.add(j.getPay());
        }
//        for(TeacherMyCourses teachermycourses: teachermycoursesarray.getTeacherMyCoursesArray()){
//            if(teachermycourses.getTeacherUsername().equals(teacherusername)){
//                coursenames.add(teachermycourses.getCourseName());
//                studentspercourse.add(teachermycourses.getStudentsRegistered());
//                }
//        }
//                    
//        
        DefaultCategoryDataset dataset = new DefaultCategoryDataset();
//        
        for(int i=0;i<company.size();i++){
            dataset.setValue(salary.get(i), "Company Salary", company.get(i));
        }
//        dataset.setValue(80, "Students Registered", "Course 1");
//        dataset.setValue(50, "Students Registered", "Course 2");
//        dataset.setValue(60, "Students Registered", "Course 3");
//        dataset.setValue(20, "Students Registered", "Course 4");
//        
        JFreeChart barchart = ChartFactory.createBarChart("Company vs Salary Chart", "Company Name", "Salary", dataset,PlotOrientation.VERTICAL,false,true,false);
        CategoryPlot p = barchart.getCategoryPlot();
        barchart.setBackgroundPaint(Color.white);
        p.setBackgroundPaint(null);
        
        BarRenderer renderer = (BarRenderer) p.getRenderer();
        Color color = new Color(41,134,204);
        renderer.setSeriesPaint(1, color);
        
        ChartPanel barChartPanel = new ChartPanel(barchart);
        panelBarChart.removeAll();
        panelBarChart.add(barChartPanel);
        panelBarChart.validate();
    }

//    private void table_content() {
//        table.addRow(new Object[]{"Mike Bhand", "mikebhand@gmail.com", "Admin", "25 Apr,2018", "25 Apr,2018"});
//        table.addRow(new Object[]{"Andrew Strauss", "andrewstrauss@gmail.com", "Editor", "25 Apr,2018","25 Apr,2018"});
//        table.addRow(new Object[]{"Ross Kopelman", "rosskopelman@gmail.com", "Subscriber", "25 Apr,2018", "25 Apr,2018"});
//        table.addRow(new Object[]{"Mike Hussy", "mikehussy@gmail.com", "Admin", "25 Apr,2018", "25 Apr,2018"});
//        table.addRow(new Object[]{"Kevin Pietersen", "kevinpietersen@gmail.com", "Admin", "25 Apr,2018", "25 Apr,2018"});
//        table.addRow(new Object[]{"Andrew Strauss", "andrewstrauss@gmail.com", "Editor", "25 Apr,2018", "25 Apr,2018"});
//        
//    }
    
    private void displayCharts(){
//       for(int i=0; i<studentprofilearray.getStudentProfileArray().size(); i++){
//            String countryName = studentprofilearray.getStudentProfileArray().get(i).getStudentCountry();
//            if(countryCount.containsKey(countryName)){
//                countryCount.put(countryName, countryCount.get(countryName) + 1);
//            }
//            else{
//                countryCount.put(countryName, 1);
//            }
//        }
//        
//        Set<String> keys =  countryCount.keySet();
//        String[] keyArray = keys.toArray(new String[0]);
//        Random random = new Random();
//
//        PieChart pieChart = new PieChart();
//        pieChart.setChartType(PieChart.PeiChartType.DONUT_CHART);
//                
//        for(int i=0; i<countryCount.size(); i++){
//      
//            Color randomColor = new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256));
//            ModelPieChart country = new ModelPieChart(keyArray[i], countryCount.get(keyArray[i]), randomColor);
//            pieChart.addData(country);
//            
//        }
//        
//        
//        ModelPieChart country2 = new ModelPieChart("Label 2", 40, Color.YELLOW);
//        ModelPieChart country3 = new ModelPieChart("Label 3", 20, Color.GREEN);
//
//        panelPieChart.add(pieChart);
//        panelPieChart.setVisible(true);
//        panelPieChart.revalidate();
//        panelPieChart.repaint();
//        
//        for(int i=0; i<teacherprofilearray.getTeacherProfileArray().size(); i++){
//            String countryName = teacherprofilearray.getTeacherProfileArray().get(i).getCountry();
//            if(countryCount1.containsKey(countryName)){
//                countryCount1.put(countryName, countryCount1.get(countryName) + 1);
//            }
//            else{
//                countryCount1.put(countryName, 1);
//            }
//            
//        }
//        
//        Set<String> keys1 =  countryCount1.keySet();
//        String[] keyArray1 = keys1.toArray(new String[0]);
//        Random random1 = new Random();
//
//        PieChart pieChart1 = new PieChart();
//        pieChart1.setChartType(PieChart.PeiChartType.DONUT_CHART);
//                
//        for(int i=0; i<countryCount1.size(); i++){
//            Color randomColor1 = new Color(random.nextInt(256), random.nextInt(256), random.nextInt(256));
//            ModelPieChart country1 = new ModelPieChart(keyArray1[i], countryCount1.get(keyArray1[i]), randomColor1);
//            pieChart1.addData(country1);
//        }
//        
//        jPanel5.add(pieChart1);
//        jPanel5.setVisible(true);
//        jPanel5.revalidate();
//        jPanel5.repaint();
//        
    }
    
    private void displaymetrics() {
        int totalstudents = 0;
        int totalcourses = 0;
        int totaljoboffers = 0;
        int totaljobsapplied = 0;
//        
        for (WorkRequest w : userAccount.getWorkQueue().getWorkRequestList()){
            totaljobsapplied+=1;
        }
        
        for (WorkRequest w : userAccount.getWorkQueue().getWorkRequestList()){
            if(w.getStatus().equals("Accepted")){
                totaljoboffers+=1;
            }
        }
        
        dashboardCard1.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/courses.png")), "Universities Applied", totalstudents));
        dashboardCard2.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/univapproval.png")), "University Acceptance", totalcourses));
        dashboardCard3.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/jobsapplied.png")), "Jobs Applied", totaljobsapplied));
        dashboardCard4.setData(new DashboardModel_card(new ImageIcon(getClass().getResource("/images/joboffers.png")), "Job Offers", totaljoboffers));
//        
    }

}
    
